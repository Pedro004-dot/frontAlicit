'use client';

import { useState, useCallback } from 'react';
import { LicitacaoEmpresa } from '../types/licitacao';

interface LicitacaoStatus {
  numeroControlePNCP: string;
  status: 'nao_definido' | 'em_analise' | 'proposta';
  relatorioId?: string;
  updatedAt: string;
}

export interface NotificacaoAnalise {
  id: string;
  numeroControlePNCP: string;
  status: string;
  relatorioId?: string;
  timestamp: Date;
  isOpen: boolean;
}

interface UseGlobalNotificationsReturn {
  notificacoes: NotificacaoAnalise[];
  mostrarNotificacao: (status: LicitacaoStatus) => void;
  fecharNotificacao: (id: string) => void;
  limparNotificacoes: () => void;
  navegarParaAnalise: (numeroControlePNCP: string) => void;
}

/**
 * ‚úÖ Hook para gerenciar notifica√ß√µes globais de an√°lises finalizadas
 * 
 * Caracter√≠sticas:
 * - Notifica√ß√µes aparecem independente da p√°gina atual
 * - Auto-remove ap√≥s tempo determinado
 * - Permite navega√ß√£o direta para an√°lise
 * - Controle fino sobre exibi√ß√£o
 */
export function useGlobalNotifications(): UseGlobalNotificationsReturn {
  const [notificacoes, setNotificacoes] = useState<NotificacaoAnalise[]>([]);

  /**
   * ‚úÖ Mostrar notifica√ß√£o de an√°lise finalizada
   */
  const mostrarNotificacao = useCallback((status: LicitacaoStatus) => {
    const novaNotificacao: NotificacaoAnalise = {
      id: `${status.numeroControlePNCP}-${Date.now()}`,
      numeroControlePNCP: status.numeroControlePNCP,
      status: status.status,
      relatorioId: status.relatorioId,
      timestamp: new Date(),
      isOpen: true
    };

    console.log('üîî Mostrando notifica√ß√£o de an√°lise finalizada:', novaNotificacao);

    setNotificacoes(prev => [...prev, novaNotificacao]);

    // ‚úÖ Auto-remover ap√≥s 30 segundos
    setTimeout(() => {
      fecharNotificacao(novaNotificacao.id);
    }, 30000);
  }, []);

  /**
   * ‚úÖ Fechar notifica√ß√£o espec√≠fica
   */
  const fecharNotificacao = useCallback((id: string) => {
    setNotificacoes(prev => prev.filter(notif => notif.id !== id));
  }, []);

  /**
   * ‚úÖ Limpar todas as notifica√ß√µes
   */
  const limparNotificacoes = useCallback(() => {
    setNotificacoes([]);
  }, []);

  /**
   * ‚úÖ Navegar para p√°gina de an√°lise
   */
  const navegarParaAnalise = useCallback((numeroControlePNCP: string) => {
    // Usar Next.js router
    window.location.href = `/minhas-licitacoes/analise/${encodeURIComponent(numeroControlePNCP)}`;
  }, []);

  return {
    notificacoes,
    mostrarNotificacao,
    fecharNotificacao,
    limparNotificacoes,
    navegarParaAnalise
  };
}
